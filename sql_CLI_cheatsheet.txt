SQL is case insensitive

Commands
Access monitor: mysql -u [username] -p; (will prompt for password)

Show all databases: show databases;

Access database: mysql -u [username] -p [database] (will prompt for password)

Create new database: create database [database];

Select database: use [database];

Determine what database is in use: select database();

execute a sql source file: source [filepath]/xxx.sql; (if source file is under current path, then run source xxx.sql;)

Show all tables: show tables;

Show table structure: DESC [table];

List all indexes on a table: show index from [table];

Create new table with columns: CREATE TABLE [table] ([column] VARCHAR(120), [another-column] DATETIME);

Crete new table with foreign key: CREATE TABLE orders(id INT AUTO_INCREMENT PRIMARY KEY, order_date DATE,amount DECIMAL(8,2),customer_id INT, FOREIGN KEY(customer_id) REFERENCES customers(id)); (column customer_id references column id in table customers)

Create table with check constraints: CREATE TABLE users ( username VARCHAR(20) NOT NULL, age INT CHECK (age > 0));

Create table with column with unique value: CREATE TABLE [table](phone VARCHAR(15) NOT NULL UNIQUE);

Adding a column: ALTER TABLE [table] ADD COLUMN [column] VARCHAR(120);

Adding a column with an unique, auto-incrementing ID: ALTER TABLE [table] ADD COLUMN [column] int NOT NULL AUTO_INCREMENT PRIMARY KEY;

Inserting a record: INSERT INTO [table] ([column], [column]) VALUES ('[value]', '[value]');
Inserting multiple records: INSERT INTO [table] ([column],[column]) VALUES ('[value]', '[value]'),('[value]', '[value]'),('[value]', '[value]');

Selecting records: SELECT * FROM [table];

Explain records: EXPLAIN SELECT * FROM [table];

Selecting parts of records: SELECT [column], [another-column] FROM [table];

Counting records: SELECT COUNT([column]) FROM [table];
Counting unique records: SELECT COUNT(DISTINCT COUNT[column]) FROM [table];

Counting and selecting grouped records: SELECT *, (SELECT COUNT([column]) FROM [table]) AS count FROM [table] GROUP BY [column];

WHERE has to go after FROM
Selecting specific records: SELECT * FROM [table] WHERE [column] = [value]; (Selectors: <, >, !=; combine multiple selectors with AND, OR)

The percent sign (%) represents zero, one, or multiple characters
The underscore sign (_) represents one, single character

Select records containing [value]: SELECT * FROM [table] WHERE [column] LIKE '%[value]%';
Select records starting with [value]: SELECT * FROM [table] WHERE [column] LIKE '[value]%';
Select records starting with val and ending with ue: SELECT * FROM [table] WHERE [column] LIKE '[val_ue]';

Select a range: SELECT * FROM [table] WHERE [column] BETWEEN [value1] and [value2];

Select with custom order and only limit: SELECT * FROM [table] WHERE [column] ORDER BY [column] ASC LIMIT [value]; (Order: DESC, ASC)
Another way to write orderby: SELECT title, author_fname, author_lname FROM books ORDER BY 1; ⇒SELECT title, author_fname, author_lname FROM books ORDER BY title;

Subquery: SELECT * FROM orders WHERE customer_id=(SELECT id FROM customers WHERE last_name='George');

A good thumb of rule is to always SELECT before UPDATE. THERE IS NO UNDO BUTTON!!
Updating records: UPDATE [table] SET [column] = '[updated-value]' WHERE [column] = [value];

A good thumb of rule is to always SELECT before DELETE. THERE IS NO UNDO BUTTON!!
Deleting records: DELETE FROM [table] WHERE [column] = [value];

Delete all records from a table (without dropping the table itself): DELETE FROM [table]; (This also resets the incrementing counter for auto generated columns like an id column.)

Delete all records in a table: truncate table [table];

Removing table columns: ALTER TABLE [table] DROP COLUMN [column];

Deleting tables: DROP TABLE [table];

Deleting databases: DROP DATABASE [database];

Custom column output names: SELECT [column] AS [custom-column] FROM [table];

Export a database dump (more info here): mysqldump -u [username] -p [database] > db_backup.sql

Use --lock-tables=false option for locked tables (more info here).

Import a database dump (more info here): mysql -u [username] -p -h localhost [database] < db_backup.sql

Logout: exit;

Aggregate functions
Select but without duplicates: SELECT distinct name, email, acception FROM owners WHERE acception = 1 AND date >= 2015-01-01 00:00:00

Calculate total number of records: SELECT SUM([column]) FROM [table];

Count total number of [column] and group by [category-column]: SELECT [category-column], SUM([column]) FROM [table] GROUP BY [category-column];

Get largest value in [column]: SELECT MAX([column]) FROM [table];

Get smallest value: SELECT MIN([column]) FROM [table];

Get average value: SELECT AVG([column]) FROM [table];

Get rounded average value and group by [category-column]: SELECT [category-column], ROUND(AVG([column]), 2) FROM [table] GROUP BY [category-column];

Multiple tables
Select from multiple tables: SELECT [table1].[column], [table1].[another-column], [table2].[column] FROM [table1], [table2];

Combine rows from different tables: SELECT * FROM [table1] INNER JOIN [table2] ON [table1].[column] = [table2].[column];

# implicit inner join
SELECT first_name,last_name,order_date,amount FROM customers,orders WHERE customers.id = customer_id;
# explicit inner join
SELECT first_name,last_name,order_date,amount FROM customers JOIN orders ON customers.id = customer_id;

Combine rows from different tables but do not require the join condition: SELECT * FROM [table1] LEFT /*OUTER*/ JOIN [table2] ON [table1].[column] = [table2].[column]; (The left table is the first table that appears in the statement.)

Rename column or table using an alias: SELECT [table1].[column] AS '[value]', [table2].[column] AS '[value]' FROM [table1], [table2];

assign 0 if value is null: 
function IFNULL
ex→ SELECT IFNULL(SUM(amount),0) AS total_spent FROM customers LEFT JOIN orders ON customers.id = orders.customer_id GROUP BY customers/id;

DELETE corresponding child records automatically when the rows from parent table are deleted: ON DELETE CASCADE:
CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) 
        REFERENCES customers(id)
        ON DELETE CASCADE
);

Users functions
List all users: SELECT User,Host FROM mysql.user;

Create new user: CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';

Grant ALL access to user for * tables: GRANT ALL ON database.* TO 'user'@'localhost';

Find out the IP Address of the Mysql Host
SHOW VARIABLES WHERE Variable_name = 'hostname'; (source)

if-case in Mysql: SELECT title, released_year, CASE WHEN released_year >= 2000 THEN 'Modern Lit' ELSE '20th Century Lit' END AS GENRE FROM books;

how to insert a string (VARCHAR) value that contains quotations.
1.Escape the quotes with a backslash: "This text has \"quotes\" in it" or 'This text has \'quotes\' in it'
2.Alternate single and double quotes: "This text has 'quotes' in it" or 'This text has "quotes" in it'

GOOGLE for [mysql string functions reference manual]  
https://dev.mysql.com/doc/refman/8.0/en/string-functions.html
string functions of often use:
1.CONCAT(stringbuilder),
ex: SELECT CONCAT(title, '-', author_fname, '-', author_lname) FROM books;
ex: SELECT CONCAT_WS(' - ', title, author_fname, author_lname) FROM books;
2.SUBSTRING
ex: SELECT SUBSTRING('Hello World', 1, 4); ⇒Hell
ex: SELECT SUBSTRING('Hello World', 7);⇒World
ex: SELECT SUBSTRING('Hello World', -3);⇒rld
ex: SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;
3.REPLACE
ex: SELECT CONCAT(SUBSTRING(title, 1, 10), '...') AS 'short title' FROM books;
4.CHAR_LENGTH
ex:
SELECT 
  CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long') 
FROM books;
5.UPPER LOWER
UPPER only takes one argument (we can't CONCAT(UPPER(author_fname, ' ', author_lname)))
ex:
SELECT UPPER(CONCAT(author_fname, ' ', author_lname)) AS "full name in caps"
FROM books;


DATA TYPE:
1.VARCHAR CHAR
CHAR is used to store character strings of fixed length.IF you store 'ab' into column with type CHAR(4), it adds 2 spaces.So it's actually stored as 'ab  ',and the storage size won't change unlike varchar
VARCHAR is used to store character strings of variable length.

2.Decimal(5,2)⇒Decimal(total number of digit,digits after decimal),ex:199.22

3.Date Time DateTime
(1)Date Format 'yyyy-mm-dd'
(2)Time Format 'hh:mm:ss'
(3)DateTime Format 'yyyy-mm-dd hh:mm:ss'
(4) function 
https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html
CURDATE() return current date
CURTIME() return current time
NOW() return current datetime
DATE_FORMAT        SELECT DATE_FORMAT(birthdt, 'Was born on a %W') FROM people;

4.TIMESTAMPS
(1)difference between DATETIME:
they all are used for values that contain both date and time parts. While the supported range is different.
TIMESTAMP is used for things like meta-data about when something is created or updated.
And TIMESTAMPS takes less store place.

DATETIME type: '1000-01-01 00:00:00'~'9999-12-31 23:59:59'
TIMESTAMPS type: '1970-01-01 00:00:01'~'2038-01-19 03:14:07'
(2)examples:
CREATE TABLE comments (
    content VARCHAR(100),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE comments2 (
    content VARCHAR(100),
    changed_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
);

