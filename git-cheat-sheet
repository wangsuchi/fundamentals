critical questions:
1. what is git?
version control system = vcs, can track & manage changes to files over time.
It allows users to revisit or revert to earlier versions of files, compare changes between versions, undo changes, etc.

2.Git versus Github? What's the difference?
Git runs locally on your PC. Don't need to register for an account. Don't need internet.
Github is a service that hosts Git repositories in the cloud, which makes it easier to collaborate with other people. Do need to register.

3.repository? or repo
a repository is a data structure that stores metadata for a set of files or directory structure
Most people prefer to have 1 repo per project,so always run git status before git init to make sure you're not in a repo before you initialize.

4.working directory　→(git add)→　staging area　→(git commit)→ repository

5.Rules of commit
(1) atomic commit
When possible, a commit should encompass a single feature, change, or fix. In other words, try to keep each commit focused on a single thing.
This makes it much easier to undo or rollback changes later on. It also makes your code or project easier to review.
(2) present-tense imperative writing style
like, make xxxx do frotz, instead of [this patch] makes xxxx do frotz or I changed xxxx to do frotz

6. .gitignore
Create a file called .gitignore in the root of a repo. Inside the file, we can write patterns to tell Git which files & folders to ignore

7. what is head?
head is a pointer or reference to the current branch.head is {ref: refs/heads/[current branch name]}.
If you look at this file, you can see hash code of a commit.

8.What is the relationship between HEAD, branch,commit?
HEAD→branch→commit hash
When we make a new commit, the branch pointer is updated to reflect the new commit.
The HEAD remains the same, because it's pointing at the branch reference.
DETACHED HEAD is a particular situation. When we checkout a specific commit, HEAD points at that commit rather than at the branch pointer.


9.resolving merge conflicts
(1)Open up the file with merge conflicts
(2)Edit the file to remove the conflicts.Decide which branch's content you want to keep in each conflict.Or keep the content from both.
(3)Remove the conflict "markers" in the document
(4)Add your changes and then make a commit.

10. merge type
(1)fast-forward merge : literally move your main branch's tip forward to(catch up) the end of your feature branch.(main branch stay unchanged when u edit your current branch)

11. what happens when you switch branch without commiting changes?
my changes come with me to the destination branch. If it detects potential conflicts, git won't let me switch.
so in this scenario, git stash comes in handy.

GIT configuration:
git config --global user.name "Your Name"                 Set the name that will be attached to your commits and tags
git config --global user.email "you@example.com"          Set the e-mail address that will be attached to your commits and tags.
git config --global color.ui auto                         Enable some colorization of Git output.

START A Project:
git init [project-name]                                   Create a new local repository
git clone [project-url]                                   Downloads a project with the entire history from the remote repository.

Day-To-Day Work:
git status                                                Displays the status of your working directory. Options include new,staged, and modified files. 
                                                          It will retrieve branch name, current commit identifier, and changes pending commit.
git add [file]                                            Add specific files to the staging area. Separate files with spaces to add multiple at once. 
git checkout HEAD [file]                                  Discard changes in working directory.
git commit                                                Create a new commit from changes added to the staging area.The commit must have a message!(default: vim editor)
git commit -m "my message"
git commit -am "my message"                               add to staging area & commit with comment "my message"
git commit --amend                                        redo the previous commit
git rm [file]                                             Remove file from working directory and staging area.
git stash                                                 Put current changes in your working directory + staging area into stash for later use
git stash pop                                             Remove the most recently stashed content into working directory, and clear stash.
git stash drop                                            Delete a specific stash from all your previous stashes. 

Git Diff:
git diff [file]                                           Show changes between working directory and staging area
git diff --staged/cached [file]                           Shows any changes between the staging area and the repository.
git diff HEAD [file]                                      Shows all changes between  (working directory + the staging area) and the repository.
git diff [branch1]..[branch2]                             Show changes between branch1 and branch2
git diff [commit1-hash]..[commit2-hash]                   Show changes between commit1 and commit2

Git branching model:
git branch [-a]                                           List all local branches in repository
git branch [branch-name]                                  Create new branch, referencing the current HEAD.
git checkout [-b][branch-name]                            Switch working directory to the specified branch. With -b: Git will create the specified branch if it does not exist.
git checkout [commit-hash]                                Switch HEAD to a previous specific commit(time traveling).You can see your detached head status with git status. 
                                                          You can go back to the latest branch(return to normal) with git switch [branch-name]
or
git checkout HEAD~1/2/3/4                                 HEAD~1 refers to the commit before HEAD, HEAD~2 refers to 2 commits before HEAD

git switch [branch name]                                  newer way to switch to [branch name]. Do exactly same thing as git checkout. 
git switch -c [new branch-name]                           create a new branch and switch to it.
git merge [from name]                                     Join specified [from name] branch into your current branch
git branch -d [branch-name]                               Remove selected branch, if it is already merged into any other. 
git branch -m [branch-name]                               Rename the current branch name                                      

git restore [file-name]                                   unmodify files. restore the file to the contents in the HEAD
git restore --source HEAD~1/2/3/... [file-name]           restore the contents of the file to its state from the commit prior to HEAD
git restore --staged [file-name]                          unstage a file

Review your work
git log [-n count]                                        List commit history of current branch. -n count limits list to last n commits.
git log --oneline --graph --decorate                      An overview with reference labels and history graph. One commit per line.
git log ref..                                             List commits that are present on the current branch and not merged
                                                          into ref. A ref can be a branch name or a tag name.
git log ..ref                                             List commit that are present on ref and not merged into current branch.
git reflog                                                List operations (e.g. checkouts or commits) made on local repository.

Reverting changes
git reset [commit-hash]                                   Reset your repository to a previous specific commit.the changes are still remained in working directory
git reset [--hard] [target reference]                     When --hard is used, all changes,both commits and the actual changes in your file are discarded.

Synchronizing repositories
git fetch [remote]                                        Fetch changes from the remote, but not update tracking branches.
git pull [remote]                                         Fetch changes from the remote and merge current branch with its upstream.
git push [--tags] [remote]                                Push local changes to the remote.
git push -u [remote] [branch]                             Push local branch to remote repository.


git reference(command options description)
https://git-scm.com/docs
